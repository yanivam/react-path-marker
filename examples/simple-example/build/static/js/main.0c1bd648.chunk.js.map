{"version":3,"sources":["../../src/ReactPathMarker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PathMarker","props","useState","radius","setRadius","color","borderColor","markerRef","React","pathRef","svgRef","x","y","w","h","markerRect","setMarkerRect","useEffect","updateMarker","svgRect","pathRect","window","r","fill","stroke","cx","cy","ref","App","createRef","redRef","greenRef","blueRef","purpleRef","greyRef","pinkRef","className","width","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c1bd648.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\ninterface IProps {\n  pathRef: React.RefObject<SVGElement>,\n  svgRef: React.RefObject<SVGSVGElement>,\n  color?: string,\n  borderColor?: string\n}\n\nexport const PathMarker: React.FC<IProps> = (props) => {\n    const [radius, setRadius] = useState(3)\n    const [color, ] = useState (props[\"color\"] || \"#ADD8E6\")\n    const [borderColor, ] = useState (props[\"borderColor\"] || \"#EEEEEE\")\n    const markerRef = React.createRef<SVGCircleElement>()\n    const pathRef = props.pathRef\n    const svgRef = props.svgRef\n    const [markerRect, setMarkerRect] = useState({ x: 0, y: 0, w: 0, h: 0})\n    \n    useEffect(() => {\n        const updateMarker = () => {\n            if(svgRef && pathRef && svgRef.current && pathRef.current && markerRef && markerRef.current) {\n                const svgRect = svgRef.current.getBoundingClientRect()\n                const pathRect = pathRef.current.getBoundingClientRect()\n                const markerRect = markerRef.current.getBoundingClientRect()\n\n                const w = markerRect.width\n                const h = markerRect.height\n                const x = (pathRect.x + 0.5 * pathRect.width - svgRect.x)\n                const y = (pathRect.y + 0.5 * pathRect.height - svgRect.y)\n\n                setMarkerRect({ x: x, y: y, w: w, h: h})\n            }\n        }\n\n        if (pathRef && pathRef.current) {\n           window.addEventListener('resize', () => { updateMarker() })\n           window.addEventListener(\"load\", () => { updateMarker() })\n           pathRef.current.addEventListener(\"mouseover\", () => {if (markerRef && markerRef.current) { markerRef.current.style.strokeWidth = \"2\"; markerRef.current.style.strokeOpacity = \"0.5\"; setRadius(5); }})\n           pathRef.current.addEventListener(\"mouseout\", () => {if (markerRef && markerRef.current) { markerRef.current.style.strokeWidth = \"1\"; markerRef.current.style.strokeOpacity = \"0.2\"; setRadius(3); }})\n           \n        }\n    }, [pathRef, svgRef, markerRef, markerRect])\n\n    return (\n        <g>\n           <circle \n            r={radius}\n            fill={color}\n            stroke={borderColor}\n            cx={markerRect.x}\n            cy={markerRect.y} \n            ref={markerRef}\n           />\n        </g>\n    )\n}","import React from \"react\"\nimport \"./App.css\"\nimport { PathMarker } from \"react-path-marker\" // import the package\n\nfunction App() {\n\n  const svgRef = React.createRef<SVGSVGElement>()\n  const redRef = React.createRef<SVGCircleElement>()\n  const greenRef = React.createRef<SVGCircleElement>()\n  const blueRef = React.createRef<SVGCircleElement>()\n  const purpleRef = React.createRef<SVGRectElement>()\n  const greyRef = React.createRef<SVGCircleElement>()\n  const pinkRef = React.createRef<SVGCircleElement>()\n\n  return (\n    < div className=\"App\" >\n      <h1>The SVG</h1>\n      < div className=\"Main\">\n        <svg width=\"400\" height=\"400\" ref={svgRef}>\n          <rect width=\"400\" height=\"400\" stroke=\"black\" fill=\"none\"/>\n\n          <circle cx={50} cy={50} r={50} fill=\"red\" ref={redRef} />\n          <circle cx={150} cy={100} r={50} fill=\"green\" ref={greenRef} />\n          <circle cx={350} cy={350} r={30} fill=\"blue\" ref={blueRef} />\n          <rect x={320} y={50} width=\"50\" height=\"50\" fill=\"purple\" ref={purpleRef}/>\n          <circle cx={50} cy={320} r={10} fill=\"grey\" ref={greyRef} />\n          <circle cx={190} cy={190} r={40} fill=\"pink\" ref={pinkRef} />\n\n          <PathMarker svgRef={svgRef} pathRef={redRef} />\n          <PathMarker svgRef={svgRef} pathRef={greenRef}  />\n          <PathMarker svgRef={svgRef} pathRef={blueRef} />\n          <PathMarker svgRef={svgRef} pathRef={purpleRef} color=\"#ee1122\" />\n          <PathMarker svgRef={svgRef} pathRef={greyRef} color=\"#abcdef\" borderColor=\"blue\"/>\n          <PathMarker svgRef={svgRef} pathRef={pinkRef} borderColor=\"green\"/>\n\n        </svg>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}