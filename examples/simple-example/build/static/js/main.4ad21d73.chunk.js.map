{"version":3,"sources":["../../src/ReactPathMarker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PathMarker","props","fontSize","useState","fontFamily","scale","setScale","bgColor","markerRef","React","textColor","pathRef","svgRef","x","y","w","h","isLeft","markerRect","setMarkerRect","textRef","useEffect","updateMarker","svgRect","pathRect","textRect","window","ref","onMouseOver","onMouseOut","transform","fill","d","cursor","visibility","App","createRef","redRef","greenRef","blueRef","purpleRef","greyRef","pinkRef","className","width","height","stroke","cx","cy","r","smallText","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ad21d73.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\ninterface IProps {\n  pathRef: React.RefObject<SVGElement>,\n  svgRef: React.RefObject<SVGSVGElement>,\n  fontSize?: number,\n  fontFamily?: string,\n  bgColor?: string,\n  smallText?: string,\n  textColor?: string\n}\n\nexport const PathMarker: React.FC<IProps> = (props) => {\n    const [fontSize, ] = useState (props[\"fontSize\"] || 12)\n    const [fontFamily, ] = useState (props[\"fontFamily\"] || \"sans-serif\")\n    const [scale, setScale] = useState(\"0.07,0.07\")\n    const [bgColor, ] = useState (props[\"bgColor\"] || \"black\")\n    const markerRef = React.createRef<SVGPathElement>()\n    const semiCircle = \"M256,0C153.755,0,70.573,83.182,70.573,185.426c0,126.888,165.939,313.167,173.004,321.035    c6.636,7.391,18.222,7.378,24.846,0c7.065-7.868,173.004-194.147,173.004-321.035C441.425,83.182,358.244,0,256,0z M256,278.719    c-51.442,0-93.292-41.851-93.292-93.293S204.559,92.134,256,92.134s93.291,41.851,93.291,93.293S307.441,278.719,256,278.719z\"\n    const [textColor, ] = useState (props[\"textColor\"] || \"black\")\n    const pathRef = props.pathRef\n    const svgRef = props.svgRef\n    const [markerRect, setMarkerRect] = useState({ x: 0, y: 0, w: 0, h: 0, isLeft: false})\n    const textRef = React.createRef<SVGTextElement>()\n\n    useEffect(() => {\n        const updateMarker = () => {\n            if(svgRef && pathRef && svgRef.current && pathRef.current && markerRef && markerRef.current && textRef && textRef.current) {\n                const svgRect = svgRef.current.getBoundingClientRect()\n                const pathRect = pathRef.current.getBoundingClientRect()\n                const markerRect = markerRef.current.getBoundingClientRect()\n                const textRect = textRef.current.getBoundingClientRect()\n\n                const isLeft = ((textRect.x - svgRect.x) > (svgRect.width / 2))\n\n                const w = markerRect.width\n                const h = markerRect.height\n                const x = (pathRect.x + 0.5 * pathRect.width - svgRect.x) - (w * 0.7)\n                const y = (pathRect.y + 0.5 * pathRect.height - svgRect.y) - h\n\n                setMarkerRect({ x: x, y: y, w: w, h: h, isLeft: isLeft})\n            }\n        }\n\n        if (pathRef && pathRef.current) {\n           window.addEventListener('resize', () => { updateMarker() })\n           window.addEventListener(\"load\", () => { updateMarker() })\n        }\n    }, [pathRef, svgRef, markerRef, textRef])\n\n    return (\n        <g>\n           <path \n                ref={markerRef}\n                onMouseOver={() => {setScale(\"0.08, 0.08\")}}\n                onMouseOut={() => {setScale(\"0.07,0.07\")}}\n                transform={\"translate(\" + (markerRect.x) + \",\" + (markerRect.y) + \")\\nscale(\" + scale + \")\"}\n                fill={bgColor}\n                d={semiCircle}\n            />\n            <text ref={textRef} x={(markerRect.isLeft) ? markerRect.x + markerRect.w + 10 : markerRect.x - markerRect.w - 10} cursor={\"default\"} y={markerRect.y + markerRect.h} fontFamily={fontFamily} fontSize={fontSize} fill={textColor} visibility={\"hidden\"}>\n                {props.smallText}\n            </text>\n        </g>\n    )\n}","import React from \"react\"\nimport \"./App.css\"\nimport { PathMarker } from \"react-path-marker\" // import the package\n\nfunction App() {\n\n  const svgRef = React.createRef<SVGSVGElement>()\n  const redRef = React.createRef<SVGCircleElement>()\n  const greenRef = React.createRef<SVGCircleElement>()\n  const blueRef = React.createRef<SVGCircleElement>()\n  const purpleRef = React.createRef<SVGRectElement>()\n  const greyRef = React.createRef<SVGCircleElement>()\n  const pinkRef = React.createRef<SVGCircleElement>()\n\n  return (\n    < div className=\"App\" >\n      <h1>The SVG</h1>\n      < div className=\"Main\">\n        <svg width=\"400\" height=\"400\" ref={svgRef}>\n          <rect width=\"400\" height=\"400\" stroke=\"black\" fill=\"none\"/>\n\n          <circle cx={50} cy={50} r={50} fill=\"red\" ref={redRef} />\n          <circle cx={100} cy={80} r={50} fill=\"green\" ref={greenRef} />\n          <circle cx={350} cy={350} r={30} fill=\"blue\" ref={blueRef} />\n          <rect x={320} y={50} width=\"50\" height=\"50\" fill=\"purple\" ref={purpleRef}/>\n          <circle cx={50} cy={320} r={10} fill=\"grey\" ref={greyRef} />\n          <circle cx={190} cy={190} r={40} fill=\"pink\" ref={pinkRef} />\n\n          <PathMarker svgRef={svgRef} pathRef={redRef} smallText=\"This is the long Red!\" />\n          <PathMarker svgRef={svgRef} pathRef={greenRef} smallText=\"Green\" />\n          <PathMarker svgRef={svgRef} pathRef={blueRef} smallText=\"BL\" fontFamily={\"system-ui\"}/>\n          <PathMarker svgRef={svgRef} pathRef={purpleRef} smallText=\"Purple\" bgColor=\"#ee1122\" fontSize={24}/>\n          <PathMarker svgRef={svgRef} pathRef={greyRef} smallText=\"Grey\" bgColor=\"#abcdef\" textColor=\"blue\"/>\n          <PathMarker svgRef={svgRef} pathRef={pinkRef} smallText=\"Pink\" textColor=\"pink\"/>\n\n        </svg>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}